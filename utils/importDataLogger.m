function [t,Lat,Long,Alt,Date,HMS,satNum,Fix,InternalAmbientK,ExternalAmbientK,BatteryK,OPCK,OPCHeater,BatteryHeater,tempC,pressurePa] = importDataLogger(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as column vectors.
%   [T,LAT,LONG,ALT,DATE,HMS,SATNUM,FIX,INTERNALAMBIENTK,EXTERNALAMBIENTK,BATTERYK,OPCK,OPCHEATER,BATTERYHEATER,TEMPC,PRESSUREPA]
%   = IMPORTFILE(FILENAME) Reads data from text file FILENAME for the
%   default selection.
%
%   [T,LAT,LONG,ALT,DATE,HMS,SATNUM,FIX,INTERNALAMBIENTK,EXTERNALAMBIENTK,BATTERYK,OPCK,OPCHEATER,BATTERYHEATER,TEMPC,PRESSUREPA]
%   = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from rows STARTROW
%   through ENDROW of text file FILENAME.
%
% Example:
%   [t,Lat,Long,Alt,Date,HMS,satNum,Fix,InternalAmbientK,ExternalAmbientK,BatteryK,OPCK,OPCHeater,BatteryHeater,tempC,pressurePa] = importfile('FLOG07.CSV',2, 3734);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2019/05/25 13:13:02

%% Initialize variables.
delimiter = ',';
if nargin<=2
    startRow = 2;
    endRow = inf;
end

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = mat2cell(dataArray{col}, ones(length(dataArray{col}), 1));
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[2,3,4,7,9,10,11,12,15,16]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1)
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData(row), regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if numbers.contains(',')
                thousandsRegExp = '^[-/+]*\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'))
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator
                numbers = textscan(char(strrep(numbers, ',', '')), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch
            raw{row, col} = rawData{row};
        end
    end
end

dateFormats = {'HH:mm:ss', 'MM/dd/yyyy', 'HH:mm:ss'};
dateFormatIndex = 1;
blankDates = cell(1,size(raw,2));
anyBlankDates = false(size(raw,1),1);
invalidDates = cell(1,size(raw,2));
anyInvalidDates = false(size(raw,1),1);
for col=[1,5,6]% Convert the contents of columns with dates to MATLAB datetimes using the specified date format.
    try
        dates{col} = datetime(dataArray{col}, 'Format', dateFormats{col==[1,5,6]}, 'InputFormat', dateFormats{col==[1,5,6]}); %#ok<AGROW>
    catch
        try
            % Handle dates surrounded by quotes
            dataArray{col} = cellfun(@(x) x(2:end-1), dataArray{col}, 'UniformOutput', false);
            dates{col} = datetime(dataArray{col}, 'Format', dateFormats{col==[1,5,6]}, 'InputFormat', dateFormats{col==[1,5,6]}); %#ok<AGROW>
        catch
            dates{col} = repmat(datetime([NaN NaN NaN]), size(dataArray{col})); %#ok<AGROW>
        end
    end
    
    dateFormatIndex = dateFormatIndex + 1;
    blankDates{col} = dataArray{col} == '';
    anyBlankDates = blankDates{col} | anyBlankDates;
    invalidDates{col} = isnan(dates{col}.Hour) - blankDates{col};
    anyInvalidDates = invalidDates{col} | anyInvalidDates;
end
dates = dates(:,[1,5,6]);
blankDates = blankDates(:,[1,5,6]);
invalidDates = invalidDates(:,[1,5,6]);

%% Split data into numeric and string columns.
rawNumericColumns = raw(:, [2,3,4,7,9,10,11,12,15,16]);
rawStringColumns = string(raw(:, [8,13,14]));


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Make sure any text containing <undefined> is properly converted to an <undefined> categorical
for catIdx = [1,2,3]
    idx = (rawStringColumns(:, catIdx) == "<undefined>");
    rawStringColumns(idx, catIdx) = "";
end

%% Allocate imported array to column variable names
t = dates{:, 1};
Lat = cell2mat(rawNumericColumns(:, 1));
Long = cell2mat(rawNumericColumns(:, 2));
Alt = cell2mat(rawNumericColumns(:, 3));
Date = dates{:, 2};
HMS = dates{:, 3};
satNum = cell2mat(rawNumericColumns(:, 4));
Fix = categorical(rawStringColumns(:, 1));
InternalAmbientK = cell2mat(rawNumericColumns(:, 5));
ExternalAmbientK = cell2mat(rawNumericColumns(:, 6));
BatteryK = cell2mat(rawNumericColumns(:, 7));
OPCK = cell2mat(rawNumericColumns(:, 8));
OPCHeater = categorical(rawStringColumns(:, 2));
BatteryHeater = categorical(rawStringColumns(:, 3));
tempC = cell2mat(rawNumericColumns(:, 9));
pressurePa = cell2mat(rawNumericColumns(:, 10));

% For code requiring serial dates (datenum) instead of datetime, uncomment
% the following line(s) below to return the imported dates as datenum(s).

% t=datenum(t);
% Date=datenum(Date);
% HMS=datenum(HMS);


